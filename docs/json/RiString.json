{
  "class": "rita.RiString",
  "fields": [{
    "name": "features",
    "example": "theFeatures = myRiString.features();",
    "description": "Returns the current set of features for the object, including <a target=_new href='../../PhonemeTags.php'>phonemes</a>, syllables, stresses, etc.",
    "syntax": "features();",
    "parameters": [],
    "returns": [{
      "type": "Object",
      "desc": "Map (in Java), Object with key-value pairs (in JS)"
    }],
    "related": "RiString.analyze()<br>RiString.get()",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "analyze",
    "example": "myRiString.analyze();<br><br>myRiString.get(RiTa.PHONEMES);<br><br>// OR<br><br>myRiString.get(\"phonemes\");",
    "description": "Computes a set of features for the object, including <a target=_new href='../../PhonemeTags.php'>phonemes</a>, syllables, stresses, etc. To access any of these, use myRiString.get(featureName)",
    "syntax": "analyze();",
    "parameters": [],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "charAt",
    "example": "myRiString.charAt(0); <br>// returns the first character from the RiString",
    "description": "Returns the character at the specified 'index'",
    "syntax": "charAt(index);",
    "parameters": [{
      "type": "int",
      "desc": "index of the character (accepts negative offsets, which count backward from the end)"
    }],
    "returns": [{
      "type": "String",
      "desc": "the character as a String"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "concat",
    "example": "RiStringA.concat(RiStringB);",
    "description": "Concatenates the text from another RiString at the end of this one",
    "syntax": "concat(riString);",
    "parameters": [{
      "type": "RiString",
      "desc": "RiString"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "copy",
    "example": "newRiString = oldRiString.copy();",
    "description": "Creates and returns a field-for-field copy of the object",
    "syntax": "copy();",
    "parameters": [],
    "returns": [{
      "type": "RiString",
      "desc": "a copy of the RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "endsWith",
    "example": "myRiString.endsWith(\"t\");",
    "description": "Tests if this string ends with the specified suffix",
    "syntax": "endsWith(suffix);",
    "parameters": [{
      "type": "String",
      "desc": "string the suffix"
    }],
    "returns": [{
      "type": "boolean",
      "desc": "true if the character sequence represented by the argument is a suffix of the character sequence represented by this object; false otherwise"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "equals",
    "example": "rs = new RiString(\"The dog was white\"); <br>rs.equals(\"The dog was white\"); // returns true",
    "description": "Compares this RiString to the specified object. <br/>The result is true if and only if the argument is not null and is a String or RiString object that represents the same sequence of characters as this object.",
    "syntax": "equals(string);<br/>equals(ristring);",
    "parameters": [{
      "type": "String OR Object",
      "desc": "String or RiString object to compare this RiString against"
    }],
    "returns": [{
      "type": "boolean",
      "desc": "true if equal, otherwise false"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "equalsIgnoreCase",
    "example": "rs = new RiString(\"the dog was white\"); <br>rs.equalsIgnoreCase(\"The dog was white\"); // returns true",
    "description": "Compares this RiString to another RiString or a String, ignoring case considerations",
    "syntax": "equalsIgnoreCase(string);<br/>equalsIgnoreCase(ristring);",
    "parameters": [{
      "type": "String OR Object",
      "desc": "String or RiString object to compare this RiString against"
    }],
    "returns": [{
      "type": "boolean",
      "desc": "true if the argument is not null and the Strings are equal, ignoring case; false otherwise"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "get",
    "example": "myRiString.analyze();<br>myRiString.get(RiTa.PHONEMES);",
    "description": "Returns the value for the feature with 'name' or null if not found",
    "syntax": "get(string);",
    "parameters": [{
      "type": "String",
      "desc": "The name of the feature"
    }],
    "returns": [{
      "type": "String",
      "desc": "the value of the feature or null if not found"
    }],
    "related": "RiString.set()",
    "platform": "Java / Javascript",
    "note": ""
  },{
    "name": "set",
    "example": "myRiString.set(\"id\",\"111\");",
    "description": "Sets the value for the feature with 'name'",
    "syntax": "set(string, string);",
    "parameters": [{
      "type": "String",
      "desc": "The name of the feature"
    },{
      "type": "String",
      "desc": "The value of the feature"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "RiString.get()",
    "platform": "Java / Javascript",
    "note": ""
  },{
    "name": "indexOf",
    "example": "myRiString = new RiString(\"apple\"); <br>myRiString.indexOf(\"a\"); // returns 0",
    "description": "Returns the index within this string of the first occurrence of the 'searchstring'",
    "syntax": "indexOf(searchstring);<br/>indexOf(searchstring, start);",
    "parameters": [{
      "type": "String",
      "desc": "searchstring to search for"
    }, {
      "type": "int",
      "desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0"
    }],
    "returns": [{
      "type": "int",
      "desc": "the first index of the matching pattern or -1 if not found"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "insertWord",
    "example": "rs = new RiString(\"What did you eat?\"); <br>rs.insertWord(4, \"yesterday\"); // What did you eat yesterday?",
    "description": "Inserts 'newWord' at 'wordIdx' and shifts each subsequent word accordingly.",
    "syntax": "insertWord(newWord, wordIdx);",
    "parameters": [{
      "type": "String",
      "desc": "the new word to insert"
    }, {
      "type": "int",
      "desc": "the position at which it insert the word"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "lastIndexOf",
    "example": "myRiString = new RiString(\"apple\"); <br>myRiString.lastIndexOf(\"p\"); // returns 2",
    "description": "Returns the index within this string of the last occurrence of the specified character",
    "syntax": "lastIndexOf(searchstring);<br/>lastIndexOf(searchstring, start);",
    "parameters": [{
      "type": "String",
      "desc": "what to search for"
    }, {
      "type": "int",
      "desc": "(Optional) The start position in the string to start the search. If omitted, the search starts from position 0"
    }],
    "returns": [{
      "type": "int",
      "desc": "the last index of the matching pattern or -1 if none are found"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "length",
    "example": "myRiString = new RiString(\"apple\"); <br>myRiString.length(); // returns 5",
    "description": "Returns the length of this string",
    "syntax": "length();",
    "parameters": [],
    "returns": [{
      "type": "int",
      "desc": "the length"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "pos",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.pos(); // returns -> prp vbd dt nn .",
    "description": "Returns an array of part-of-speech tags (from the <a href='../../PennTags.html'>PENN tag set</a>), one per word, using RiTa.tokenize() and RiTa.getPosTags()",
    "syntax": "pos();",
    "parameters": [],
    "returns": [{
      "type": "String[]",
      "desc": "strings of pos, one per word"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "posAt",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.posAt(0); // returns -> prp",
    "description": "Returns the part-of-speech tag for the word at 'index' (from the <a href='../../PennTags.html'>PENN tag set</a>), using RiTa.tokenize() and RiTa.getPosTags()",
    "syntax": "posAt(index);",
    "parameters": [{
      "type": "int",
      "desc": "the word index"
    }],
    "returns": [{
      "type": "String",
      "desc": "the pos"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "removeChar",
    "example": "myRiString = new RiString(\"apple\"); <br>myRiString.removeChar(4); // returns appl",
    "description": "Removes the character at the specified index",
    "syntax": "removeChar(index);",
    "parameters": [{
      "type": "int",
      "desc": "the index"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "replaceChar",
    "example": "myRiString = new RiString(\"apple\"); <br>myRiString.replaceChar(4,\"y\"); // returns apply",
    "description": "Replaces the character at 'idx' with 'replaceWith'. <br/>If the specified 'idx' is less than zero, or beyond the length of the current text, there will be no effect",
    "syntax": "replaceChar(idx, replaceWith);",
    "parameters": [{
      "type": "int",
      "desc": "the character index"
    }, {
      "type": "String",
      "desc": "the replacement"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "match",
    "example": "rs = new RiString(\"The rain stays mainly in the plain\");<br>count = rs.match(\"ain\").length; // count equals 3",
    "description": "Tells whether the string matches the given regular expression, and if so, returns all matches.",
    "syntax": "match(pattern);",
    "parameters": [{
      "type": "String or Object (the regex)",
      "desc": "regular expression"
    }],
    "returns": [{
      "type": "String[]",
      "desc": "string array of matches or empty array if none are found"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "replaceFirst",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.replaceFirst(\"?\", \"?!\"); // Who are you?!",
    "description": "Replaces the first instance of 'substitution' with 'replacement'.",
    "syntax": "replaceFirst(substitution, replacement);",
    "parameters": [{
      "type": "String or Object (the regex pattern)",
      "desc": "the pattern"
    }, {
      "type": "String",
      "desc": "the replacement"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": "Global flags on the regular expression argument are ignored"
  }, {
    "name": "replaceAll",
    "example": "rs = new RiString(\"Who are you? Who is he?\"); <br>rs.replaceAll(\"?\", \"?!\"); // Who are you?! Who is he?!",
    "description": "Replaces each occurrence of 'substitution' with 'replacement'.",
    "syntax": "replaceAll(substitution, replacement);",
    "parameters": [{
      "type": "String or Object (the regex)",
      "desc": "the pattern to be matched"
    }, {
      "type": "String",
      "desc": "the replacement string"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "replaceWord",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.replaceWord(0,\"She\"); <br>// returns -> She ate the apple.",
    "description": "Replaces the word at 'wordIdx' with 'newWord'",
    "syntax": "replaceWord(wordIdx, newWord);",
    "parameters": [{
      "type": "int",
      "desc": "the index"
    }, {
      "type": "String",
      "desc": "the replacement"
    }],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "slice",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.slice(0,6); // He ate",
    "description": "Extracts a part of a string from this RiString",
    "syntax": "slice(begin);<br/>slice(begin, end);",
    "parameters": [{
      "type": "int",
      "desc": "The index where to begin the extraction. First character is at index 0"
    }, {
      "type": "int",
      "desc": "(Optional) Where to end the extraction. If omitted, slice() selects all characters from the begin position to the end of the string"
    }],
    "returns": [{
      "type": "String",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "hidden": "true",
    "name": "split",
    "example": "",
    "description": "Split a RiString into an array of RiStrings, one for each element after the split, and returns the new array.",
    "syntax": "split();<br/>split(separator);<br/>",
    "parameters": [{
      "type": "String",
      "desc": "(Optional) Specifies the character to use for splitting the string. If omitted, the string is split according to RiTa.tokenize(). If an empty string (\"\") is used as the separator, the string is split between each character."
    }],
    "returns": [{
      "type": "RiStrings[]",
      "desc": "the RiString array"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "startsWith",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.startsWith(\"W\"); // true",
    "description": "Tests if this string starts with the specified prefix",
    "syntax": "startsWith(substr);",
    "parameters": [{
      "type": "String",
      "desc": "string the prefix"
    }],
    "returns": [{
      "type": "boolean",
      "desc": "true if the character sequence represented by the argument is a prefix of the character sequence represented by this string; false otherwise. <br/>Note also that true will be returned if the argument is an empty string or is equal to this RiString object as determined by the equals() method."
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "substring",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.substring(0,6); // He ate",
    "description": "Extracts the characters from a string, between two specified indices, and sets the current text to be that string. ",
    "syntax": "substring(from);<br/>substring(from, to);",
    "parameters": [{
      "type": "int",
      "desc": "The index where to start the extraction. First character is at index 0"
    }, {
      "type": "int",
      "desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string"
    }],
    "returns": [{
      "type": "String",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "substr",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.substr(3,3); // ate",
    "description": "Extracts the characters from this objects contained string, beginning at 'start' and continuing through the specified number of characters, and sets the current text to be that string. (from Javascript String)",
    "syntax": "substr(start);<br/>substr(start, length);",
    "parameters": [{
      "type": "int",
      "desc": "The index where to start the extraction. First character is at index 0"
    }, {
      "type": "int",
      "desc": "(optional) The index where to stop the extraction. If omitted, it extracts the rest of the string"
    }],
    "returns": [{
      "type": "String",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "text",
    "example": "myRiString.text(\"apple\"); // set the text <br>txt = myRiString.text(); // get the text",
    "description": "Gets/sets the text contained by this object",
    "syntax": "text();<br/>text(theText);",
    "parameters": [{
      "type": "String",
      "desc": "text (optional)"
    }],
    "returns": [{
      "type": "String OR RiString",
      "desc": "the contained text (for sets) or this RiString (for gets)"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "toCharArray",
    "hidden": true,
    "description": "Converts this object to an array of RiString objects, one per character",
    "syntax": "toCharArray();",
    "parameters": [],
    "returns": [{
      "type": "RiString[]",
      "desc": "RiStrings with each letter as its own RiString element"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "toLowerCase",
    "example": "myRiString = new RiString(\"He ate the apple.\"); <br>myRiString.toLowerCase(); // he ate the apple.",
    "description": "Converts all of the characters in this RiString to lower case",
    "syntax": "toLowerCase();",
    "parameters": [],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "toUpperCase",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.toUpperCase(); // WHO ARE YOU?",
    "description": "Converts all of the characters in this RiString to upper case",
    "syntax": "toUpperCase();",
    "parameters": [],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "trim",
    "example": "rs = new RiString(\"   Who are you?  \"); <br>rs.trim(); // Who are you?",
    "description": "Removes leading and trailing whitespace from the RiString",
    "syntax": "trim();",
    "parameters": [],
    "returns": [{
      "type": "RiString",
      "desc": "this RiString"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "wordAt",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.wordAt(0); // Who",
    "description": "Returns the word at 'index', according to RiTa.tokenize()",
    "syntax": "wordAt(index);",
    "parameters": [{
      "type": "int",
      "desc": "the word index"
    }],
    "returns": [{
      "type": "String",
      "desc": "the word"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "wordCount",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.wordCount(); // 4",
    "description": "Returns the number of words in the object, according to RiTa.tokenize().",
    "syntax": "wordCount();",
    "parameters": [],
    "returns": [{
      "type": "int",
      "desc": "number of words"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "words",
    "example": "rs = new RiString(\"Who are you?\"); <br>rs.words();",
    "description": "Returns the array of words in the object, via a call to RiTa.tokenize()",
    "syntax": "words();",
    "parameters": [],
    "returns": [{
      "type": "String[]",
      "desc": "array of words"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }]
}
