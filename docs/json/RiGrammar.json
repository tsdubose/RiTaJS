{
  "class": "rita.RiGrammar",
  "fields": [{
    "name": "addRule",
    "example": "rg = new RiGrammar();<br>rg.addRule(\"&lt;start&gt;\", \"&lt;animal&gt;\");<br>rg.addRule(\"&lt;animal&gt;\", \"cat | dog | chicken\");",
    "description": "Adds a rule to the existing grammar, replacing any existing rule with the same name",
    "syntax": "addRule(name, ruleStr, weight);",
    "parameters": [{
        "type": "String",
        "desc": "the rule name"
      }, {
        "type": "String",
        "desc": "the rule definition"
      }, {
        "type": "float",
        "desc": "the rule weight (optional, defaults to 1)"
      }

    ],
    "returns": [{
        "type": "RiGrammar",
        "desc": "this RiGrammar"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "expand",
    "example": "rg = new RiGrammar(stringOrObject); <br>result = rg.expand();",
    "description": "Expands a grammar from its '&#60;start&#62;' symbol. Note: if the grammar does not include a '&#60;start&#62;' symbol, use &nbsp;<code>expandFrom(\"ruleName\")</code>&nbsp; instead, to start from the rule of your choice)",
    "syntax": "expand();<br/>expand(callbackObject);",
    "parameters": [{
      "type": "Object",
      "desc": "the object on which to call any (back-ticked) callback functions (optional)"
    }],
    "returns": [{
      "type": "String",
      "desc": "the result of the expansion (or an error if no &lt;start&gt; rule is found)"
    }],
    "related": "<a href='../expandFrom/'>expandFrom()</a>, <a href='../expandWith/'>expandWith()</a>",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "expandFrom",
    "example": "rg = new RiGrammar(stringOrObject); <br>result = rg.expandFrom('&lt;start&gt;');",
    "description": "Expands the grammar, starting from the given symbol. <br/>&nbsp;<br/>RiGrammar.expand() is equivalent to RiGrammar.expandFrom('&lt;start&gt;').",
    "syntax": "expandFrom(rule);<br/>expandFrom(rule, callbackObject);",
    "parameters": [{
        "type": "String",
        "desc": "the rule from which to start the expansion"
      }, {
        "type": "Object",
        "desc": "the object on which to call any (back-ticked) callback functions (optional)"
      }

    ],
    "returns": [{
      "type": "String",
      "desc": "the result of the expansion"
    }],
    "related": "<a href='../expand/'>expand()</a>, <a href='../expandWith/'>expandWith()</a>",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "expandWith",
    "hidden": true,
    "example": "",
    "description": "Expands the grammar after replacing an instance of the non-terminal 'symbol' with the String in 'literal'.<br/>&nbsp;<br/>Guarantees that 'literal' will be in the final expanded String, assuming at least one instance of 'symbol' in the Grammar.",
    "syntax": "expandWith(literal, symbol);<br/>expandWith(literal, symbol, callbackObject);",
    "parameters": [{
      "type": "String",
      "desc": "a literal"
    }, {
      "type": "String",
      "desc": "a symbol"
    }, {
      "type": "Object",
      "desc": "the object on which to call any (back-ticked) callback functions (optional)"
    }],
    "returns": [{
      "type": "String",
      "desc": "the result of the expansion"
    }],
    "related": "<a href='../expandFrom/'>expandFrom()</a>, <a href='../expand/'>expand()</a>",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "load",
    "example": "rg = new RiGrammar(); <br>rg.load(\"&lt;start&gt;: the &lt;pet&gt; | the &lt;action&gt; of the &lt;pet&gt;\");",
    "description": "Loads a grammar from a String or YAML/JSON object",
    "syntax": "load(grammarRules);",
    "parameters": [{
      "type": "String or Object",
      "desc": "a String or (YAML/JSON) Object representation of the grammar"
    }],
    "returns": [{
      "type": "Object",
      "desc": "this RiGrammar object"
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "getGrammar",
    "example": "rg = new RiGrammar(); <br>rg.addRule(\"&lt;start&gt;\", \"the &lt;action&gt; of the &lt;pet&gt;\", 1);<br>rg.addRule(\"&lt;pet&gt;\", \"dog | hawk | crow\", 1); <br>rg.addRule(\"&lt;action&gt;\", \"cries | screams | falls\", 1);<br>println(rg.getGrammar());",
    "description": "Gets the current grammar as a String",
    "syntax": "grammar();",
    "parameters": [],
    "returns": [{
        "type": "String",
        "desc": "a string representation of the grammar"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "loadFrom",
    "example": "rg = new RiGrammar(); <br>rg.loadFrom(\"grammar.yaml\");",
    "description": "Re-initializes the grammar from a file or URL containing the grammar rules",
    "syntax": "loadFrom(fileOrURL, option);",
    "parameters": [{
      "type": "String",
      "desc": "File or URL containing the grammar rules"
    }, {
      "type": "Function or Object (optional)",
      "desc": "If a function is supplied (in JavaScript), it will be called after the file is loaded.<br>If a PApplet(in Java) is passed, it will be used to locate and check the 'data' folder of the sketch for the specified file"
    }],
    "returns": [{
      "type": "RiGrammar",
      "desc": "this RiGrammar"
    }],
    "related": "",
    "platform": "Delegates to RiTa.loadString() to load. To check if the object has finished loading, check RiGrammar.ready(). Alternatively, one can use the &lt;script src=...&gt; tag to include the YAML/JSON grammar file in an html page (probably a better option).",
    "note": ""
  }, {
    "name": "hasRule",
    "example": "rg = new RiGrammar(); <br>rg.addRule(\"&lt;start&gt;\", \"the &lt;action&gt; of the &lt;pet&gt;\", 1);<br>rg.addRule(\"&lt;pet&gt;\", \"dog | hawk | crow\", 1); <br>rg.addRule(\"&lt;action&gt;\", \"cries | screams | falls\", 1);<br>rg.hasRule(\"&lt;action&gt;\") // true",
    "description": "Returns true if the requested rule exists in the grammar, else false",
    "syntax": "hasRule(ruleName);",
    "parameters": [{
      "type": "String",
      "desc": "the rule name"
    }],
    "returns": [{
        "type": "boolean",
        "desc": "true if the rule exists in the grammar, else false"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "print",
    "example": "rg = new RiGrammar(); <br>rg.addRule(\"&lt;start&gt;\", \"the &lt;action&gt; of the &lt;pet&gt;\", 1);<br>rg.addRule(\"&lt;pet&gt;\", \"dog | hawk | crow\", 1); <br>rg.addRule(\"&lt;action&gt;\", \"cries | screams | falls\", 1);<br>rg.print();",
    "description": "Prints the grammar rules to the console in human-readable format (useful for debugging)",
    "syntax": "print();",
    "parameters": [

    ],
    "returns": [{
        "type": "RiGrammar",
        "desc": "this RiGrammar"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "removeRule",
    "example": "rg = new RiGrammar(); <br>rg.addRule(\"&lt;pet&gt;\", \"dog | hawk | crow\", 1); <br>rg.removeRule(\"&lt;pet&gt;\");",
    "description": "Deletes the named rule from the grammar",
    "syntax": "removeRule(name);",
    "parameters": [{
      "type": "String",
      "desc": "the rule name"
    }],
    "returns": [{
        "type": "RiGrammar",
        "desc": "this RiGrammar"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "ready",
    "example": "rg = new RiGrammar(); <br>rg.loadFrom(\"grammar.yaml\");<br>rg.ready();",
    "description": "Returns true if there is at least one valid rule, else false",
    "syntax": "ready();",
    "parameters": [],
    "returns": [{
        "type": "boolean",
        "desc": "true if there is at least one valid rule, else false"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "reset",
    "example": "rg = new RiGrammar(); <br>rg.addRule(\"&lt;pet&gt;\", \"dog | hawk | crow\", 1); <br>rg.reset();",
    "description": "Clears all rules in the current grammar",
    "syntax": "reset();",
    "parameters": [],
    "returns": [{
        "type": "RiGrammar",
        "desc": "this RiGrammar"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }]
}
