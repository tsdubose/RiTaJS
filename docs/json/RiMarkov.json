{
  "class": "rita.RiMarkov",
  "fields": [{
    "variable": true,
    "name": "minSentenceLength",
    "example": "",
    "description": "minimum length of a generated sentence",
    "syntax": "riMarkov.minSentenceLength",
    "parameters": [],
    "returns": [{
      "type": "int",
      "desc": ""
    }],
    "related": "maxSentenceLength",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "variable": true,
    "name": "maxSentenceLength",
    "example": "",
    "description": "maximum length of a generated sentence",
    "syntax": "riMarkov.maxSentenceLength",
    "parameters": [],
    "returns": [{
      "type": "int",
      "desc": ""
    }],
    "related": "minSentenceLength",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "generateTokens",
    "example": "rm = new RiMarkov(3);<br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>rm.generateTokens(4);",
    "description": "Generates a string of 'length' tokens from the model",
    "syntax": "generateTokens(targetNumber);",
    "parameters": [{
        "type": "int",
        "desc": "the target number of tokens to generate"
      }

    ],
    "returns": [{
        "type": "String array",
        "desc": "the result"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "ready",
    "example": "rm = new RiMarkov(3);<br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>if (rm.ready()) { ... };",
    "description": "Returns true if there is at least one valid rule, else false",
    "syntax": "ready();",
    "parameters": [],
    "returns": [{
        "type": "boolean",
        "desc": "true if there is at least one valid rule, else false"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "loadFrom",
    "example": "rm = new RiMarkov(3);<br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");",
    "description": "Loads raw text into the object from one or more files/URLs",
    "syntax": "loadFrom(fileOrURL);<br>loadFrom(fileOrURL, option);",
    "parameters": [{
      "type": "String or Array",
      "desc": "File or URL from which to load the file"
    }, {
      "type": "Function or Object (optional)",
      "desc": "If a function is supplied (in JavaScript), it will be called after the file is loaded.<br>If a PApplet(in Java) is passed, it will be used to locate and check the 'data' folder of the sketch for the specified file"
    }],
    "returns": [{
      "type": "RiMarkov",
      "desc": "this RiMarkov"
    }],
    "related": "",
    "platform": "Delegates to RiTa.loadString() to load. To check if the object has finished loading, check RiMarkov.ready().",
    "note": ""
  }, {
    "name": "generateUntil",
    "example": "rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>output = rm.generateUntil(\"the\");",
    "description": "Continues generating tokens until a token matches 'regex', assuming the length of the output array is between min and maxLength (inclusive).",
    "syntax": "generateUntil(regex, minLength, maxLength);",
    "parameters": [{
        "type": "String",
        "desc": "the regular expression (regex) to match"
      }, {
        "type": "int",
        "desc": "the minimum number of tokens to generate"
      }, {
        "type": "int",
        "desc": "the maximum number of tokens to generate"
      }

    ],
    "returns": [{
        "type": "String array",
        "desc": "the result"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "generateSentence",
    "example": "rm = new RiMarkov(3);<br>rm.loadText(theText);<br>sentences = rm.generateSentence();",
    "description": "Generates a single sentence from the model",
    "syntax": "generateSentence();",
    "parameters": [],
    "returns": [{
        "type": "String",
        "desc": "the result"
      }
    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "generateSentences",
    "example": "rm = new RiMarkov(3);<br>rm.loadText(theText);<br>sentences = rm.generateSentences(10);",
    "description": "Generates some # (one or more) of sentences from the model.<br>&nbsp;<br>Note: multiple sentences generated by this method WILL follow the model across sentence boundaries; thus the following two calls are NOT equivalent:<br>&nbsp;<br><pre>results = markov.generateSentences(10);<br>// and<br>for (int i = 0; i < 10; i++)<br> results[i] = markov.generateSentence(1);</pre>The latter will create 10 sentences with no explicit relationship between one and the next; while the former will follow probabilities from one sentence (across a boundary) to the next.",
    "syntax": "generateSentences(num);",
    "parameters": [{
      "type": "int",
      "desc": "the number of sentences"
    }],
    "returns": [{
        "type": "String array",
        "desc": "the result"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "getCompletions",
    "example": "result = rm.getCompletions([ &#34;the&#34;,&#34;red&#34;]);<br>&nbsp;<br>result = rm.getCompletions([ &#34;the&#34; ], [ &#34;red&#34;, &#34;ball&#34; ]);",
    "syntax": "getCompletions(preArray);<br>getCompletions(preArray, postArray);",
    "description": "If only one array parameter is provided, this function returns all possible next words (or tokens), ordered by probability, for the given array.<br>&nbsp;<br>If two arrays are provided, it returns an unordered list of possible words <i>w</i> that complete the n-gram consisting of: pre[0]...pre[k], <i>w</i>, post[k+1]...post[n].<br><br><pre>result = rm.getCompletions([ &#34;the&#34; ], [ &#34;red&#34;, &#34;ball&#34; ]);</pre>will return all the single words that occur between 'the' and 'red ball' in the current model (assuming n > 3),e.g., [ 'round', 'big', 'bouncy']).<br><br>Note: For this operation to be valid, (pre.length + post.length) must be less than the model's n-factor, otherwise an error will be thrown.",

    "parameters": [{
        "type": "String array",
        "desc": "pre"
      }, {
        "type": "String array",
        "desc": "post (optional)"
      }

    ],
    "returns": [{
        "type": "String array",
        "desc": "an unordered list of possible next tokens"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "getProbabilities",
    "example": "rm = new RiMarkov(3); <br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>rm.getProbabilities([\"be\", \"thought\"]);",
    "description": "Returns the full set of possible next tokens as a map, given an array of tokens representing the path down the tree (with length less than n).<br>&nbsp;<br>Note: seed arrays of any size (>0) may be input, but only the last n-1 elements will be considered.   ",
    "syntax": "getProbabilities(pathString);<br>getProbabilities(pathArray);",
    "parameters": [{
      "type": "String OR String array",
      "desc": "a single token or array of tokens (strings)"
    }],
    "returns": [{
        "type": "Map",
        "desc": "associative array (JS) or HashMap (Java) mapping tokens to probabilities"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "getProbability",
    "example": "rm = new RiMarkov(3); <br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>rm.getProbability(\"the\");",
    "description": "Returns either the raw (unigram) probability for a single token in the model (0 if it does not exist) <br>&nbsp;<br>OR <br>&nbsp;<br>(for an array) the probability of obtaining a sequence of k tokens where k <= nFactor,<br>e.g., if nFactor = 3, then valid lengths for the data arrau are 1, 2 & 3.",
    "syntax": "getProbability(dataString);<br>getProbability(dataArray);",
    "parameters": [{
      "type": "String OR String array",
      "desc": "the string (or sequence of strings) to search for"
    }],
    "returns": [{
        "type": "float",
        "desc": "probability from 0-1"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "loadTokens",
    "example": "sample = \"One reason people lie is to achieve personal power.\";<br>rm = new RiMarkov(3);<br>rm.loadTokens(tokens);",
    "description": "Loads an array of tokens (or words) into the model; <br>each element in the array must be a single token for proper construction of the model. ",
    "syntax": "loadTokens(tokens);<br>loadTokens(tokens, multiplier);",
    "parameters": [{
        "type": "String array",
        "desc": "tokens the strings with which to load the model"
      }, {
        "type": "int",
        "desc": "weighting for tokens in the array (optional, default=1)"
      }

    ],
    "returns": [{
        "type": "RiMarkov",
        "desc": "this RiMarkov"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "loadText",
    "example": "sample = \"One reason people lie is to achieve personal power.\";<br>rm = new RiMarkov(3);<br>rm.loadText(sample);",
    "description": "Loads a text string into the model after tokenizing it.",
    "syntax": "loadText(text);<br>loadText(text, multiplier);<br>loadText(text, multiplier, regex);",
    "parameters": [{
      "type": "String",
      "desc": "the string to load"
    }, {
      "type": "int",
      "desc": "weighting for text (optional, default=1) "
    }, {
      "type": "String",
      "desc": "a regular expression to be used for tokenizing (optional, if not supplied, uses RiTa.tokenize())"
    }],
    "returns": [{
        "type": "RiMarkov",
        "desc": "this RiMarkov"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "print",
    "example": "rm = new RiMarkov(3);<br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\");<br>rm.print();",
    "description": "Prints a formatted version of the model to the console ",
    "syntax": "print();",
    "parameters": [

    ],
    "returns": [{
        "type": "RiMarkov",
        "desc": "this RiMarkov"
      }

    ],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }, {
    "name": "size",
    "example": "rm = new RiMarkov(3);<br>rm.loadFrom(\"http://www.rednoise.org/rita/examples/data/wittgenstein.txt\"); if (rm.size() > 10) { ... }",
    "description": "Returns the number of tokens currently in the model",
    "syntax": "size();",
    "parameters": [


    ],
    "returns": [{
      "type": "int",
      "desc": ""
    }],
    "related": "",
    "platform": "Java / Javascript",
    "note": ""
  }]
}
